Я сравнивал коллекции на основании 4х операций добавление/удаление в/из конец(ца)
Все исходные коды лежат в соответствующих пакетах
1. АНАЛИЗ LIST'ов
	Raw data:
		ArrayList
			Add time : 17 789 800
			Remove time : 9 549 300
			Add in center time : 4 121 009 100
			Remove in center time : 2 323 071 500
		LinkedList
			Add time : 20 914 100
			Remove time : 7 958 900
			Add in center time : 2 669 114 700
			Remove in center time : 2 397 223 200
		MyLinkedList
			Add time : 13 515 600
			Remove time : 16 352 736 800
			Add in center time : 8 236 761 000
			Remove in center time : 5 887 893 700
	Вывод: добавление в конец - быстрее всего сработал MyLinkedList(юхуу!), забавно то, что ArrayList выполнился быстрее, чем LinkedList. Лично меня это удивило, потому что для массива - это самое трудоемкая операция. Возможно повлияло то, что ArrayList при инициализации берет "на будущее" несколько элементов. Может быть, при еще большем количестве элементов.
	Удаление из конца - как я и ожидал, быстрее всех справился LinkedList, а медленнее всех MyLinkedList. С моим листом все понятно, тк это односвязный список и, чтобы удалить эдемент в конце, нужно пройти по всем остальным.
	Добавление в центр - быстрее всего справился ArrayList, а медленнее MyLinkedList
	Удаление из центра - ArrayList и LinkedList справились примерно одинаково, а MyLinkedList потребовалось в 2 раза больше времени.
	Главный вывод - лучше не использовать мой list)

2. АНАЛИЗ SET'ОВ
	Raw data:
		HashSet
			Add time : 90 041 600
			Remove time : 34 436 400
		LinkedHashSet
			Add time : 107 898 900
			Remove time : 61 021 800
		TreeSet 
			Add time : 279 452 500
			Remove time : 162 194 400
	Выводы: добавление - вполене очевидно, что HashSet справился быстрее всех, а TreeSet потратил намного больше времени.
	удаление - результат такой же. Для данных операций и приданных условиях лучше всех подходит HashSet

3. АНАЛИЗ MAP
	Raw data:
		HashMap
			Add time : 141218700
			Remove time : 20407000
		LinkedHashMap
			Add time : 182795200
			Remove time : 22219500
		TreeMap
			Add time : 180599200
			Remove time : 38020300
	Выводы: добавление - HashMap справился быстрее, LinkedHashMap и TreeMap показали примерно одинаковое время
	удаление - HashMap и LinkedHashMap справились примерно в за одно время, TreeMap потратил почти в 2 раза больше времени
